// Code generated by MockGen. DO NOT EDIT.
// Source: infra/cognito/cognito.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	cognitoidentityprovider "github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"
	gomock "github.com/golang/mock/gomock"
)

// MockCognitoClient is a mock of CognitoClient interface.
type MockCognitoClient struct {
	ctrl     *gomock.Controller
	recorder *MockCognitoClientMockRecorder
}

// MockCognitoClientMockRecorder is the mock recorder for MockCognitoClient.
type MockCognitoClientMockRecorder struct {
	mock *MockCognitoClient
}

// NewMockCognitoClient creates a new mock instance.
func NewMockCognitoClient(ctrl *gomock.Controller) *MockCognitoClient {
	mock := &MockCognitoClient{ctrl: ctrl}
	mock.recorder = &MockCognitoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCognitoClient) EXPECT() *MockCognitoClientMockRecorder {
	return m.recorder
}

// ConfirmSignUp mocks base method.
func (m *MockCognitoClient) ConfirmSignUp(ctx context.Context, params *cognitoidentityprovider.ConfirmSignUpInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ConfirmSignUpOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfirmSignUp", varargs...)
	ret0, _ := ret[0].(*cognitoidentityprovider.ConfirmSignUpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmSignUp indicates an expected call of ConfirmSignUp.
func (mr *MockCognitoClientMockRecorder) ConfirmSignUp(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmSignUp", reflect.TypeOf((*MockCognitoClient)(nil).ConfirmSignUp), varargs...)
}

// InitiateAuth mocks base method.
func (m *MockCognitoClient) InitiateAuth(ctx context.Context, params *cognitoidentityprovider.InitiateAuthInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.InitiateAuthOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InitiateAuth", varargs...)
	ret0, _ := ret[0].(*cognitoidentityprovider.InitiateAuthOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateAuth indicates an expected call of InitiateAuth.
func (mr *MockCognitoClientMockRecorder) InitiateAuth(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateAuth", reflect.TypeOf((*MockCognitoClient)(nil).InitiateAuth), varargs...)
}

// RevokeToken mocks base method.
func (m *MockCognitoClient) RevokeToken(ctx context.Context, params *cognitoidentityprovider.RevokeTokenInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.RevokeTokenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeToken", varargs...)
	ret0, _ := ret[0].(*cognitoidentityprovider.RevokeTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeToken indicates an expected call of RevokeToken.
func (mr *MockCognitoClientMockRecorder) RevokeToken(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeToken", reflect.TypeOf((*MockCognitoClient)(nil).RevokeToken), varargs...)
}

// SignUp mocks base method.
func (m *MockCognitoClient) SignUp(ctx context.Context, params *cognitoidentityprovider.SignUpInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.SignUpOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignUp", varargs...)
	ret0, _ := ret[0].(*cognitoidentityprovider.SignUpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockCognitoClientMockRecorder) SignUp(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockCognitoClient)(nil).SignUp), varargs...)
}
